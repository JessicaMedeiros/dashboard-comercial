{"ast":null,"code":"import * as L from 'leaflet';\nimport worldGeoJSON from '../../../assets/paises.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/comexstat.service\";\nexport let MapaComercialComponent = /*#__PURE__*/(() => {\n  class MapaComercialComponent {\n    comexService;\n    elementRef;\n    map;\n    geoJSONLayer;\n    exportData = new Map();\n    dataSubscription;\n    initialized = false;\n    constructor(comexService, elementRef) {\n      this.comexService = comexService;\n      this.elementRef = elementRef;\n    }\n    ngOnInit() {\n      if (!this.initialized) {\n        this.initMap();\n        this.loadExportData();\n        this.initialized = true;\n      }\n    }\n    ngOnDestroy() {\n      this.cleanup();\n    }\n    initMap() {\n      const mapContainer = this.elementRef.nativeElement.querySelector('#map');\n      this.map = L.map(mapContainer, {\n        center: [20, 0],\n        zoom: 2,\n        maxZoom: 5,\n        minZoom: 2,\n        worldCopyJump: false,\n        // Impede repetição do mapa\n        preferCanvas: true\n      });\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap',\n        noWrap: true // Evita repetição de tiles\n      }).addTo(this.map);\n      this.createBaseGeoJSONLayer();\n    }\n    createBaseGeoJSONLayer() {\n      // Remove camada existente se houver\n      if (this.geoJSONLayer) {\n        this.map.removeLayer(this.geoJSONLayer);\n      }\n      // Filtra features únicas baseadas em um ID (usando ISO_A3 como exemplo)\n      const uniqueFeatures = this.getUniqueFeatures(worldGeoJSON.features);\n      this.geoJSONLayer = L.geoJSON(uniqueFeatures, {\n        style: feature => this.getCountryStyle(feature),\n        onEachFeature: (feature, layer) => this.setupCountryInteraction(feature, layer)\n      }).addTo(this.map);\n    }\n    getUniqueFeatures(features) {\n      const uniqueIds = new Set();\n      return features.filter(feature => {\n        const id = feature.properties?.ISO_A3 || feature.id;\n        if (!uniqueIds.has(id)) {\n          uniqueIds.add(id);\n          return true;\n        }\n        return false;\n      });\n    }\n    loadExportData() {\n      this.dataSubscription = this.comexService.getExportacoesPorPais('2025-01', '2025-03').subscribe(data => {\n        this.processExportData(data);\n        this.updateMapStyles();\n      });\n    }\n    processExportData(exportacoes) {\n      this.exportData.clear();\n      exportacoes.forEach(e => {\n        const countryName = e.country;\n        this.exportData.set(countryName, e.value);\n      });\n    }\n    updateMapStyles() {\n      if (!this.geoJSONLayer) return;\n      this.geoJSONLayer.setStyle(feature => this.getCountryStyle(feature));\n      this.geoJSONLayer.eachLayer(layer => {\n        const feature = layer.feature;\n        if (feature) {\n          const countryName = feature.properties.name;\n          const exportValue = this.exportData.get(countryName);\n          if (exportValue !== undefined) {\n            layer.bindPopup(this.createCountryPopup(countryName, exportValue));\n          }\n        }\n      });\n    }\n    getCountryStyle(feature) {\n      const countryName = feature.properties.name;\n      const exportValue = this.exportData.get(countryName) || 0;\n      return {\n        fillColor: this.getColorByValue(exportValue),\n        weight: 1,\n        opacity: 1,\n        color: 'white',\n        fillOpacity: 0.8,\n        className: 'country-path' // Classe CSS adicional\n      };\n    }\n    setupCountryInteraction(feature, layer) {\n      const countryName = feature.properties.name;\n      const exportValue = this.exportData.get(countryName);\n      if (exportValue !== undefined) {\n        layer.bindPopup(this.createCountryPopup(countryName, exportValue));\n        layer.on({\n          mouseover: e => this.highlightFeature(e),\n          mouseout: e => this.resetHighlight(e),\n          click: e => this.zoomToFeature(e)\n        });\n      }\n    }\n    highlightFeature(e) {\n      const layer = e.target;\n      layer.setStyle({\n        weight: 3,\n        color: '#555',\n        fillOpacity: 0.9\n      });\n      layer.bringToFront();\n    }\n    resetHighlight(e) {\n      const layer = e.target;\n      this.geoJSONLayer?.resetStyle(layer);\n    }\n    zoomToFeature(e) {\n      this.map?.fitBounds(e.target.getBounds(), {\n        padding: [50, 50]\n      });\n    }\n    createCountryPopup(countryName, value) {\n      return `<div class=\"country-popup\">\n              <h4>${countryName}</h4>\n              <p>Exportações: <strong>US$ ${(value / 1e9).toFixed(2)} bi</strong></p>\n            </div>`;\n    }\n    getColorByValue(valor) {\n      // Sua escala de cores existente\n      return valor > 10_000_000_000 ? '#08306b' : valor > 5_000_000_000 ? '#2171b5' : valor > 1_000_000_000 ? '#6baed6' : valor > 500_000_000 ? '#c6dbef' : valor > 0 ? '#deebf7' : '#f7f7f7';\n    }\n    cleanup() {\n      if (this.map) {\n        this.map.remove();\n      }\n      if (this.dataSubscription) {\n        this.dataSubscription.unsubscribe();\n      }\n    }\n    static ɵfac = function MapaComercialComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MapaComercialComponent)(i0.ɵɵdirectiveInject(i1.ComexstatService), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapaComercialComponent,\n      selectors: [[\"app-mapa-comercial\"]],\n      decls: 2,\n      vars: 0,\n      consts: [[1, \"map-container\"], [\"id\", \"map\"]],\n      template: function MapaComercialComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"div\", 1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".country-path[_ngcontent-%COMP%]{pointer-events:auto;transition:fill .3s ease,stroke .3s ease}.country-path[_ngcontent-%COMP%]:hover{stroke-width:2px}.leaflet-container[_ngcontent-%COMP%]{background:#f8f9fa!important}.map-container[_ngcontent-%COMP%]{height:600px;width:100%;position:relative}.map-container[_ngcontent-%COMP%]   #map[_ngcontent-%COMP%]{height:100%;width:100%;background:#f0f2f5}\"]\n    });\n  }\n  return MapaComercialComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}